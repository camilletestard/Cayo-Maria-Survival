numP[gy] = length(partners[[groupyears[gy]]])
}
el.pre = EL[EL$isPost== "pre",]
partners[["pre"]] = unique(c(el.pre$ID1, el.pre$ID2))
numP.pre = length(partners[["pre"]])
el.post = EL[EL$isPost== "post",]
partners[["post"]] = unique(c(el.post$ID1, el.post$ID2))
numP.post = length(partners[["post"]])
intersect(partners[["pre"]], partners[["post"]])
View(el.post)
View(el.pre)
id="8E8"
edgelist.all$weight = edgelist.all$count/edgelist.all$total_samples
EL = edgelist.all[edgelist.all$ID1==id | edgelist.all$ID2==id ,]
EL = EL[EL$count!=0,]
EL$groupyear=paste0(EL$group, EL$year)
groupyears = unique(EL$groupyear); gy=1; partners=list(); numP=vector()
for (gy in 1:length(groupyears)){
el.groupyear = EL[EL$groupyear == groupyears[gy],]
partners[[groupyears[gy]]] = unique(c(el.groupyear$ID1, el.groupyear$ID2))
numP[gy] = length(partners[[groupyears[gy]]])
}
el.pre = EL[EL$isPost== "pre",]
partners[["pre"]] = unique(c(el.pre$ID1, el.pre$ID2))
numP.pre = length(partners[["pre"]])
el.post = EL[EL$isPost== "post",]
partners[["post"]] = unique(c(el.post$ID1, el.post$ID2))
numP.post = length(partners[["post"]])
intersect(partners[["pre"]], partners[["post"]])
partners[["pre"]]
partners[["post"]]
View(partners)
#proximity_survival_postTimeVarying_allgroups.R
#1. Creates imputed dataset combining demographic information and
#the distribution of possible proximity networks pre-hurricane
#generated with bison from the observed data
#2. Run survival models on imputed datasets, pooling uncertainty across each model
#C. Testard October 2022
#Load libraries
#Data wrangling
library(dplyr)
#Survival analysis
library(survival)
library(survminer)
library(simsurv)
library(coxme)
#modelling
library(marginaleffects)
#For plotting
library(ggplot2)
#multiple imputation
library(mice)
library(broom.mixed)
library(eha)
library(ehahelper)
#Set seed for reproducibility
set.seed(1234)
#Load demographic data and behavioral data from bison networks
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/R.Data/")
load("BisonProximity.RData")
load('Survival_Adults_TimeVarying_allgroups.RData')
#Set group year list
group = c("V","V","V","V","KK","S","F","TT","F")
years = c(2018, 2019, 2021,2022, 2018, 2019, 2021,2022,2022)
groupyears = paste0(group,years)
######################################
## STEP 1: CREATE IMPUTED DATASSET ###
######################################
# Extract change in proximity from each draw to create imputed data set:
imputed.data=list(); sd.degree=vector(); i=1; gy=1;
for (i in 1:num_iter){
data<-SurvivalData.ALL[,c("id","id.year","period","year","group","sex",
"Age_entry.days","Age_event.days",
"Survival","days.in.study","percofsex.dominanted")]
data$percofsex.dominanted=as.numeric(scale(data$percofsex.dominanted))
data$id = as.factor(data$id)
data$sex[data$sex=="FALSE"]="F"; data$sex = as.factor(data$sex);
data$group = as.factor(data$group)
data$location = ifelse(data$group=="V","small cayo","big cayo")
data$year=as.factor(data$year)
data$period=as.factor(data$period)
data$id.year = paste(data$id, data$year, data$group,sep='.')
data$days.in.study=as.numeric(data$days.in.study)
data$Age_entry.years=as.numeric(data$Age_entry.days)/365
#data$Survival=as.factor(data$Survival)
proximity.all=data.frame()
for (gy in 1:length(groupyears)){
nodes = node_ids[[groupyears[gy]]]
strengthID = node_strength_all[[groupyears[gy]]]
degreeID = node_degree_all[[groupyears[gy]]]
proximity = data.frame(id.year = paste(nodes,years[gy], group[gy],sep='.'))
proximity$node_strength = as.numeric(strengthID[i,])
proximity$degree = as.numeric(degreeID[i,])
proximity.all=rbind(proximity.all, proximity)
}
data.final<-merge(data, proximity.all, by="id.year")
#Standardize for later interpretation of models
data.final$std.node_strength = (data.final$node_strength-mean(data.final$node_strength))/sd(data.final$node_strength)
data.final$std.degree = (data.final$degree-mean(data.final$degree))/sd(data.final$degree)
sd.degree[i] = sd(data.final$degree)
imputed.data[[i]]=data.final
print(i)
#Confirm sample sizes
length(unique(data.final$id))
length(unique(data.final$id[data.final$Survival==1]))
}
#Create imputed dataset to use in frequentist survival models
imp<-miceadds::datalist2mids(imputed.data, progress=T)
#Load libraries
#Data wrangling
library(dplyr)
#Survival analysis
library(survival)
library(survminer)
library(simsurv)
library(coxme)
#modelling
library(marginaleffects)
#For plotting
library(ggplot2)
#multiple imputation
library(mice)
library(broom.mixed)
library(eha)
library(ehahelper)
#Set seed for reproducibility
set.seed(1234)
#Load demographic data and behavioral data from bison networks
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/R.Data/")
load("BisonProximity.RData")
load('Survival_Adults_TimeVarying_allgroups.RData')
#Set group year list
group = c("V","V","V","V","KK","S","F","TT","F")
years = c(2018, 2019, 2021,2022, 2018, 2019, 2021,2022,2022)
groupyears = paste0(group,years)
######################################
## STEP 1: CREATE IMPUTED DATASSET ###
######################################
# Extract change in proximity from each draw to create imputed data set:
imputed.data=list(); sd.degree=vector(); i=1; gy=1;
data<-SurvivalData.ALL[,c("id","id.year","period","year","group","sex",
"Age_entry.days","Age_event.days",
"Survival","days.in.study","percofsex.dominanted")]
data$percofsex.dominanted=as.numeric(scale(data$percofsex.dominanted))
data$id = as.factor(data$id)
data$sex[data$sex=="FALSE"]="F"; data$sex = as.factor(data$sex);
data$group = as.factor(data$group)
data$location = ifelse(data$group=="V","small cayo","big cayo")
data$year=as.factor(data$year)
data$period=as.factor(data$period)
data$id.year = paste(data$id, data$year, data$group,sep='.')
data$days.in.study=as.numeric(data$days.in.study)
data$Age_entry.years=as.numeric(data$Age_entry.days)/365
#data$Survival=as.factor(data$Survival)
proximity.all=data.frame()
for (gy in 1:length(groupyears)){
nodes = node_ids[[groupyears[gy]]]
strengthID = node_strength_all[[groupyears[gy]]]
degreeID = node_degree_all[[groupyears[gy]]]
proximity = data.frame(id.year = paste(nodes,years[gy], group[gy],sep='.'))
proximity$node_strength = as.numeric(strengthID[i,])
proximity$degree = as.numeric(degreeID[i,])
proximity.all=rbind(proximity.all, proximity)
}
data.final<-merge(data, proximity.all, by="id.year")
#Standardize for later interpretation of models
data.final$std.node_strength = (data.final$node_strength-mean(data.final$node_strength))/sd(data.final$node_strength)
data.final$std.degree = (data.final$degree-mean(data.final$degree))/sd(data.final$degree)
View(data.final)
#Load libraries
#Data wrangling
library(dplyr)
#Survival analysis
library(survival)
library(survminer)
library(simsurv)
library(coxme)
#modelling
library(marginaleffects)
#For plotting
library(ggplot2)
#multiple imputation
library(mice)
library(broom.mixed)
library(eha)
library(ehahelper)
#Set seed for reproducibility
set.seed(1234)
#Load demographic data and behavioral data from bison networks
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/R.Data/")
load("BisonProximity.RData")
load('Survival_Adults_TimeVarying_allgroups.RData')
#Set group year list
group = c("V","V","V","V","KK","S","F","TT","F")
years = c(2018, 2019, 2021,2022, 2018, 2019, 2021,2022,2022)
groupyears = paste0(group,years)
######################################
## STEP 1: CREATE IMPUTED DATASSET ###
######################################
# Extract change in proximity from each draw to create imputed data set:
imputed.data=list(); sd.degree=vector(); i=1; gy=1;
for (i in 1:num_iter){
data<-SurvivalData.ALL[,c("id","id.year","period","year","group","sex",
"Age_entry.days","Age_event.days",
"Survival","days.in.study","percofsex.dominanted")]
data$percofsex.dominanted=as.numeric(scale(data$percofsex.dominanted))
data$id = as.factor(data$id)
data$sex[data$sex=="FALSE"]="F"; data$sex = as.factor(data$sex);
data$group = as.factor(data$group)
data$location = ifelse(data$group=="V","small cayo","big cayo")
data$year=as.factor(data$year)
data$period=as.factor(data$period)
data$id.year = paste(data$id, data$year, data$group,sep='.')
data$days.in.study=as.numeric(data$days.in.study)
data$Age_entry.years=as.numeric(data$Age_entry.days)/365
#data$Survival=as.factor(data$Survival)
proximity.all=data.frame()
for (gy in 1:length(groupyears)){
nodes = node_ids[[groupyears[gy]]]
strengthID = node_strength_all[[groupyears[gy]]]
degreeID = node_degree_all[[groupyears[gy]]]
proximity = data.frame(id.year = paste(nodes,years[gy], group[gy],sep='.'))
proximity$node_strength = as.numeric(strengthID[i,])
proximity$degree = as.numeric(degreeID[i,])
proximity.all=rbind(proximity.all, proximity)
}
data.final<-merge(data, proximity.all, by="id.year")
#Standardize for later interpretation of models
data.final$std.node_strength = (data.final$node_strength-mean(data.final$node_strength))/sd(data.final$node_strength)
data.final$std.degree = (data.final$degree-mean(data.final$degree))/sd(data.final$degree)
sd.degree[i] = sd(data.final$degree)
imputed.data[[i]]=data.final
print(i)
#Confirm sample sizes
length(unique(data.final$id))
length(unique(data.final$id[data.final$Survival==1]))
}
#Create imputed dataset to use in frequentist survival models
imp<-miceadds::datalist2mids(imputed.data, progress=T)
################################################
## STEP 2: Run downstream survival analyses ###
################################################
#This step propagates the uncertainty from step 1 through
#subsequent frequentist survival models
# Goal: Test survival effects of post hurricane proximity
#Add absence of rank effect in the suppl.
# # #Standard status
# status.post <- with(imp, coxme(Surv(Age_entry.days, Age_event.days, Survival)~
#                                       1+ percofsex.dominanted+
#                                       (1|group) + (1|id) +(1|period)))
# summary(mice::pool(status.post))
#
# #Sanity check (males should have higher mortality risk than females)
# #Sex
# sex.post <- with(imp, coxme(Surv(Age_entry.days, Age_event.days, Survival)~
#                                       1+ sex +
#                                       (1|group) + (1|id) +(1|period)))
# summary(mice::pool(sex.post))
#Standard proximity degree
degree.prox.post <- with(imp, coxme(Surv(Age_entry.days, Age_event.days, Survival)~
1+ std.degree+ sex+ #percofsex.dominanted+
(1|group)+(1|id) +(1|period)))
mdl.pool.degree<-summary(mice::pool(degree.prox.post))
est = mdl.pool.degree$estimate[1] ; print(est)
se = mdl.pool.degree$std.error[1]
CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
HR = exp(est); print(HR)
HR_CI = exp(CI); print(HR_CI)
round(mean(sd.degree),2)
View(data.final)
ggplot(data.final, aes(x=Survival, y=std.node_strength))+
geom_violin()
ggplot(data.final, aes(color=Survival, y=std.node_strength))+
geom_violin()
data.final$Survival=as.factor(data.final$Survival)
ggplot(data.final, aes(x=Survival, y=std.node_strength))+
geom_violin()
aggregate(std.node_strength~Survival, data.final, mean)
aggregate(std.node_strength~Survival, data.final, median)
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/R.Data/")
load("proximity_data_AM.RData")
View(edgelist.all)
edgelist.all$weight = edgelist.all$count/edgelist.all$total_samples
pre_weights = edgelist.all$weight
load("proximity_data_PM.RData")
edgelist.all$weight = edgelist.all$count/edgelist.all$total_samples
post_weights = edgelist.all$weight
mean(post_weights)
nanmean(post_weights)
density(post_weights)
density(post_weights(!is.na(post_weights)))
density(post_weights(!is.na(post_weights)))
density(post_weights[!is.na(post_weights)])
density(pre_weights[!is.na(pre_weights)])
AM.data = load("proximity_data_AM.RData")
PM.data = load("proximity_data_PM.RData")
load("proximity_data_AM.RData")
load("proximity_data_AM.RData"); AM.data = edgelist.all; AM.data$weights = AM.data$count/AM.data$total
load("proximity_data_PM.RData"); PM.data = edgelist.all; PM.data$weights = PM.data$count/PM.data$total
load("proximity_data_AM.RData"); AM.data = edgelist.all; AM.data$weights = AM.data$count/AM.data$total_samples
load("proximity_data_PM.RData"); PM.data = edgelist.all; PM.data$weights = PM.data$count/PM.data$total_samples
ggplot(AM.data, aes(x=weights,color=isPost))+
geom_density()
density(AM.data$weights[AM.data$isPost=="pre"])
is.na(AM.data$weights)]
is.na(AM.data$weights)
AM.data$weights[is.na(AM.data$weights)]=0
View(AM.data)
load("proximity_data_AM.RData"); AM.data = edgelist.all; AM.data$weights = AM.data$count/AM.data$total_samples
which(is.na(AM.data))
AM.data$weights[is.na(AM.data$weights)]=0
density(AM.data$weights[AM.data$isPost=="pre"])
density(AM.data$weights[AM.data$isPost=="post"])
PM.data$weights[is.na(PM.data$weights)]=0
density(PM.data$weights[PM.data$isPost=="pre"])
density(PM.data$weights[PM.data$isPost=="post"])
density(AM.data$weights[AM.data$isPost=="pre"])
AM.data$weights[AM.data$isPost=="pre"]
density(AM.data$weights[AM.data$isPost=="pre"])
density(AM.data$weights[AM.data$isPost=="pre"])
density(AM.data$weights[AM.data$isPost=="post"])
density(PM.data$weights[PM.data$isPost=="pre"])
density(PM.data$weights[PM.data$isPost=="post"])
density(PM.data$weights[PM.data$isPost=="pre"])
density(PM.data$weights[PM.data$isPost=="post"])
AM.data$weights[is.na(AM.data$weights)]=0
mat[1,1]=mean(AM.data$weights[AM.data$isPost=="pre"])
mat[2,1]=mean(AM.data$weights[AM.data$isPost=="post"])
PM.data$weights[is.na(PM.data$weights)]=0
mat[1,2]=density(PM.data$weights[PM.data$isPost=="pre"])
mat[2,2]=density(PM.data$weights[PM.data$isPost=="post"])
mat=matrix()
AM.data$weights[is.na(AM.data$weights)]=0
mat[1,1]=mean(AM.data$weights[AM.data$isPost=="pre"])
mat[2,1]=mean(AM.data$weights[AM.data$isPost=="post"])
PM.data$weights[is.na(PM.data$weights)]=0
mat[1,2]=density(PM.data$weights[PM.data$isPost=="pre"])
mat[2,2]=density(PM.data$weights[PM.data$isPost=="post"])
mat=matrix()
mat[1,1]=mean(AM.data$weights[AM.data$isPost=="pre"])
mat[2,1]=mean(AM.data$weights[AM.data$isPost=="post"])
mat=matrix(nrow=2,ncol=2)
AM.data$weights[is.na(AM.data$weights)]=0
mat[1,1]=mean(AM.data$weights[AM.data$isPost=="pre"])
mat[2,1]=mean(AM.data$weights[AM.data$isPost=="post"])
PM.data$weights[is.na(PM.data$weights)]=0
mat[1,2]=density(PM.data$weights[PM.data$isPost=="pre"])
mat[2,2]=density(PM.data$weights[PM.data$isPost=="post"])
mat=matrix(nrow=2,ncol=2)
mat[1,1]=mean(AM.data$weights[AM.data$isPost=="pre"])
mat[2,1]=mean(AM.data$weights[AM.data$isPost=="post"])
density(PM.data$weights[PM.data$isPost=="post"])
max(density(PM.data$weights[PM.data$isPost=="post"]))
max(PM.data$weights[PM.data$isPost=="post"])
mean(PM.data$weights[PM.data$isPost=="post"])
median(PM.data$weights[PM.data$isPost=="post"])
mat[1,1]=mean(AM.data$weights[AM.data$isPost=="pre"])
mat[2,1]=mean(AM.data$weights[AM.data$isPost=="post"])
PM.data$weights[is.na(PM.data$weights)]=0
mat[1,2]=mean(PM.data$weights[PM.data$isPost=="pre"])
mat[2,2]=mean(PM.data$weights[PM.data$isPost=="post"])
mat
heatmap(mat)
plot(density(AM.data$weights[AM.data$isPost=="pre"]))
library(ggplot2)
#Load shade use data
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/Shade_use/")
data=readxl::read_xlsx("Space use data.xlsx")
data$Shade.perc=as.numeric(data$Shade.perc); data$Shade.perc[is.na(data$Shade.perc)]=0
data$MonkeyTemp=as.numeric(data$MonkeyTemp)
data$AM.PM=as.factor(data$AM.PM)
data$shade.status[which(data$shade.status=="YU"|data$shade.status=="YA")]="Y"
data$shade.status[which(data$shade.status=="Na")]="N"
data$shade.status=as.factor(data$shade.status)
ggplot(data, aes(x=shade.status, y=Focal.Clique.Size, color=AM.PM))+
geom_jitter(width=0.1, alpha=0.3)+
geom_boxplot(width=0.5, alpha=0.1)+
facet_grid(~AM.PM)+
theme_light()
ggplot(data, aes(x=Shade.perc, y=Clique.Size, color = AM.PM))+
geom_jitter()+
geom_smooth()
ggplot(data, aes(x=AM.PM, y=Shade.perc))+
geom_violin()+
geom_boxplot(width=0.2)+
geom_jitter(width=0.1, alpha=0.2)+
theme_classic(base_size = 14)
data$Shade.perc[data$AM.PM=="AM"]
ttest(data$Shade.perc[data$AM.PM=="am"])
data$Shade.perc[data$AM.PM=="am"]
t.test(data$Shade.perc[data$AM.PM=="am"], data$Shade.perc[data$AM.PM=="pm"])
library(mice)
library(broom.mixed)
library(eha)
library(ehahelper)
library(ggplot2)
library(dplyr)
library(forcats)
#load model outputs
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/R.Data/") #Set working directory
#Load model outputs testing effect of post-hurricane sociality on survival based on AM data
load("ProxMdlOutput_PostHurr_AM.RData") #Survival model for the effect of proximity post-hurricane
#Load model outputs testing effect of pre-hurricane sociality on survival based on PM data
load("ProxMdlOutput_PostHurr_PM.RData")#Survival model for the effect of proximity post-hurricane
mdl_output<-data.frame(matrix(NA, nrow=4, ncol=5))
names(mdl_output)=c("metric","isPost","estimate","lower","upper")
#Proximity degree AM
mdl.pool.degree<-summary(mice::pool(degree.prox.post.AM))
est = mdl.pool.degree$estimate[1]
se = mdl.pool.degree$std.error[1]
CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
HR = exp(est)
HR_CI = exp(CI)
mdl_output[1,]=c("degree","AM",est,CI[1], CI[2])
#Proximity strength AM
mdl.pool.strength<-summary(mice::pool(strength.prox.post.AM))
est = mdl.pool.strength$estimate[1]
se = mdl.pool.strength$std.error[1]
CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
HR = exp(est)
HR_CI = exp(CI)
mdl_output[2,]=c("strength","AM",est,CI[1], CI[2])
# #Proximity status prehurr
# mdl.pool.status<-summary(mice::pool(status.pre))
# est = mdl.pool.status$estimate[1]
# se = mdl.pool.status$std.error[1]
# CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
# HR = exp(est)
# HR_CI = exp(CI)
# mdl_output[3,]=c("status","prehurr",est,CI[1], CI[2])
#Proximity degree posthurr
mdl.pool.degree<-summary(mice::pool(degree.prox.post.PM))
est = mdl.pool.degree$estimate[1]
se = mdl.pool.degree$std.error[1]
CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
HR = exp(est)
HR_CI = exp(CI)
mdl_output[3,]=c("degree","PM",est,CI[1], CI[2])
#Proximity strength posthurr
mdl.pool.strength<-summary(mice::pool(strength.prox.post.PM))
est = mdl.pool.strength$estimate[1]
se = mdl.pool.strength$std.error[1]
CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
HR = exp(est)
HR_CI = exp(CI)
mdl_output[4,]=c("strength","PM",est,CI[1], CI[2])
# #Proximity status posthurr
# mdl.pool.status<-summary(mice::pool(status.post))
# est = mdl.pool.status$estimate[1]
# se = mdl.pool.status$std.error[1]
# CI = c(est-se*qnorm(0.975), est+se*qnorm(0.975))
# HR = exp(est)
# HR_CI = exp(CI)
# mdl_output[6,]=c("status","posthurr",est,CI[1], CI[2])
mdl_output$full.label<-paste(mdl_output$metric,mdl_output$isPost, sep=".")
mdl_output$estimate=as.numeric(mdl_output$estimate)
mdl_output$lower=as.numeric(mdl_output$lower)
mdl_output$upper=as.numeric(mdl_output$upper)
mdl_output$full.label=as.factor(mdl_output$full.label)
mdl_output = mdl_output %>%
mutate(full.label = fct_relevel(full.label,
"strength.PM","degree.PM",
"strength.AM","degree.AM"
))
ggplot(mdl_output, aes(x=full.label,y=estimate)) +        # ggplot2 plot with confidence intervals
geom_point(size=3, shape=21, fill="blue") +
geom_hline(yintercept =0,colour="red",linetype = "longdash",size=1)+
geom_errorbar(aes(ymin = lower, ymax = upper), colour="black", width=.1)+
#ylim(-1., 0.2)+
coord_flip()+theme_light()
library(ggplot2)
#Load shade use data
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/Shade_use/")
data=readxl::read_xlsx("Space use data.xlsx")
data$Shade.perc=as.numeric(data$Shade.perc); data$Shade.perc[is.na(data$Shade.perc)]=0
data$MonkeyTemp=as.numeric(data$MonkeyTemp)
data$AM.PM=as.factor(data$AM.PM)
data$shade.status[which(data$shade.status=="YU"|data$shade.status=="YA")]="Y"
data$shade.status[which(data$shade.status=="Na")]="N"
data$shade.status=as.factor(data$shade.status)
table(data$id)
library(ggplot2)
#Load shade use data
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/Shade_use/")
data=readxl::read_xlsx("Space use data.xlsx")
data$Shade.perc=as.numeric(data$Shade.perc); data$Shade.perc[is.na(data$Shade.perc)]=0
data$MonkeyTemp=as.numeric(data$MonkeyTemp)
data$AM.PM=as.factor(data$AM.PM)
data$shade.status[which(data$shade.status=="YU"|data$shade.status=="YA")]="Y"
data$shade.status[which(data$shade.status=="Na")]="N"
data$shade.status=as.factor(data$shade.status)
ggplot(data, aes(x=shade.status, y=Focal.Clique.Size, color=AM.PM))+
geom_jitter(width=0.1, alpha=0.3)+
geom_boxplot(width=0.5, alpha=0.1)+
facet_grid(~AM.PM)+
theme_light()
#Load shade use data
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/Shade_use/")
data=readxl::read_xlsx("Space use data.xlsx")
data$Shade.perc=as.numeric(data$Shade.perc); data$Shade.perc[is.na(data$Shade.perc)]=0
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/Shade_use/")
data=readxl::read_xlsx("Space use data.xlsx")
data$Shade.perc=as.numeric(data$Shade.perc); data$Shade.perc[is.na(data$Shade.perc)]=0
data$MonkeyTemp=as.numeric(data$MonkeyTemp)
data$AM.PM=as.factor(data$AM.PM)
data$shade.status[which(data$shade.status=="YU"|data$shade.status=="YA")]="Y"
data$shade.status[which(data$shade.status=="Na")]="N"
data$shade.status=as.factor(data$shade.status)
setwd("~/Documents/GitHub/Cayo-Maria-Survival/Data/Shade_use/")
data=readxl::read_xlsx("Space use data.xlsx")
table(data$ID)
t<-table(data$ID)
