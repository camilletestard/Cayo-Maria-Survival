install.packages('ggplot',dependencies = T)
install.packages('ggplot2',dependencies = T)
growth <- replicate( 10000 , prod( 1 + runif(12,0,0.1) ) )
dens( growth , norm.comp=TRUE )
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking",ref="Experimental")
growth <- replicate( 10000 , prod( 1 + runif(12,0,0.1) ) )
dens( growth , norm.comp=TRUE )
library(rethinking)
growth <- replicate( 10000 , prod( 1 + runif(12,0,0.1) ) )
dens( growth , norm.comp=TRUE )
str( d )
data(Howell1)
d <- Howell1
str( d )
precis( d )
d2 <- d[ d$age >= 18 , ]
dens(d2$height)
curve( dnorm( x , 178 , 20 ) , from=100 , to=250 )
sample_mu <- rnorm( 1e4 , 178 , 20 )
sample_sigma <- runif( 1e4 , 0 , 50 )
prior_h <- rnorm( 1e4 , sample_mu , sample_sigma )
dens( prior_h )
sample_mu <- rnorm( 1e4 , 178 , 100 )
prior_h <- rnorm( 1e4 , sample_mu , sample_sigma )
dens( prior_h )
mu.list <- seq( from=150, to=160 , length.out=100 )
sigma.list <- seq( from=7 , to=9 , length.out=100 )
post <- expand.grid( mu=mu.list , sigma=sigma.list )
post$LL <- sapply( 1:nrow(post) , function(i) sum(
dnorm( d2$height , post$mu[i] , post$sigma[i] , log=TRUE ) ) )
post$prod <- post$LL + dnorm( post$mu , 178 , 20 , TRUE ) +
dunif( post$sigma , 0 , 50 , TRUE )
post$prob <- exp( post$prod - max(post$prod) )
post$prob
contour_xyz( post$mu , post$sigma , post$prob )
image_xyz( post$mu , post$sigma , post$prob )
sample.rows <- sample( 1:nrow(post) , size=1e4 , replace=TRUE ,
prob=post$prob )
sample.mu <- post$mu[ sample.rows ]
sample.sigma <- post$sigma[ sample.rows ]
plot( sample.mu , sample.sigma , cex=0.5 , pch=16 , col=col.alpha(rangi2,0.1) )
dens( sample.mu )
dens( sample.sigma )
View(post)
#Posterior distribution using quadratic approximation
flist <- alist( #Define model assumptions in a list
height ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 178 , 20 ) ,
sigma ~ dunif( 0 , 50 )
)
# The engine inside quap then uses the definitions above to determine the posterior probability
# at each combination of parameter values. Then it can climb the posterior distribution
# and find the peak, its MAP. Finally, it estimates the quadratic curvature at the MAP
# to produce an approximation of the posterior distribution.
m4.1 <- quap( flist , data=d2 )
View(m4.1)
precis( m4.1 )
m4.2 <- quap(
alist(
height ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 178 , 0.1 ) , #Narrower prior
sigma ~ dunif( 0 , 50 )
) , data=d2 )
precis( m4.2 )
vcov( m4.1 )
diag( vcov( m4.1 ) )
cov2cor( vcov( m4.1 ) )
post <- extract.samples( m4.1 , n=1e4 ) #get samples from the prior defined in m4.1
head(post)
precis(post)
plot( NULL , xlim=range(d2$weight) , ylim=c(-100,400) ,
xlab="weight" , ylab="height" )
abline( h=0 , lty=2 )
abline( h=272 , lty=1 , lwd=0.5 )
mtext( "b ~ dnorm(0,10)" )
xbar <- mean(d2$weight)
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar) ,
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
set.seed(2971) #to replicate results
N <- 100
a <- rnorm( N , 178 , 20 )
b <- rnorm( N , 0 , 10 )
plot( NULL , xlim=range(d2$weight) , ylim=c(-100,400) ,
xlab="weight" , ylab="height" )
abline( h=0 , lty=2 )
abline( h=272 , lty=1 , lwd=0.5 )
mtext( "b ~ dnorm(0,10)" )
xbar <- mean(d2$weight)
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar) ,
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
b <- rlnorm( 1e4 , 0 , 1 )
dens( b , xlim=c(0,5) , adj=0.1 )
set.seed(2971)
N <- 100                   # 100 lines
a <- rnorm( N , 178 , 20 )
b <- rlnorm( N , 0 , 1 )
plot( NULL , xlim=range(d2$weight) , ylim=c(-100,400) ,
xlab="weight" , ylab="height" )
abline( h=0 , lty=2 )
abline( h=272 , lty=1 , lwd=0.5 )
mtext( "b ~ dnorm(0,10)" )
xbar <- mean(d2$weight)
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar) ,
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
#Load libraries:
library(survival)
library(survminer)
library(coxme)
library(ggplot2)
#############################################
# Change in sociality pre-to-post hurricane
#############################################
setwd('~/Documents/GitHub/Cayo-Maria-Survival/R.Data')
load('SocialCapital_changeP_Adults.RData') #input dataframe generated previously.
#Initialize variables
fit.groom.hr=data.frame(matrix(ncol=4)); names(fit.groom.hr)=c("dpSocial","sexF","num_obs")
fit.prox.hr=data.frame(matrix(ncol=4)); names(fit.prox.hr)=c("dpAcc","sexF","num_obs")
i=1; max_iter = max(full.data$iter)
#Adult_Survival_ChangePrePost_allYearsPre.R
#This script runs survival models on adults to test whether change in sociality
#pre-to-post hurricane predicts survival up to 4 years after hurricane Maria.
#Input: SocialCapital_changeP_Adults.RData
#Camille Testard Feb. 2022, adapted from Chloe Shergold code.
#Load libraries:
library(survival)
library(survminer)
library(coxme)
library(ggplot2)
#############################################
# Change in sociality pre-to-post hurricane
#############################################
setwd('~/Documents/GitHub/Cayo-Maria-Survival/R.Data')
load('SocialCapital_changeP_Adults.RData') #input dataframe generated previously.
#Initialize variables
fit.groom.hr=data.frame(matrix(ncol=4)); names(fit.groom.hr)=c("dpSocial","sexF","num_obs")
fit.prox.hr=data.frame(matrix(ncol=4)); names(fit.prox.hr)=c("dpAcc","sexF","num_obs")
i=1; max_iter = max(full.data$iter)
for (i in 1:max_iter){
data= full.data[full.data$iter==1,];
# #Plot the raw data
# setwd('~/Documents/GitHub/Cayo-Maria-Survival/Results')
# dpAcc.hist<-ggplot(data,aes(x=dpAcc))+
#   geom_histogram()+ theme_classic(base_size = 15)+
#   geom_vline(xintercept = 0, linetype="dashed", color = "red",size=2)+
#   xlab('Change in p(proximity) pre-to-post hurricane')
# ggsave("dpAcc.hist.png")
# dpSocial.hist<-ggplot(data,aes(x=dpSocial))+
#   geom_histogram()+ theme_classic(base_size = 15)+
#   geom_vline(xintercept = 0, linetype="dashed", color = "red",size=2 )+
#   xlab('Change in p(grooming) pre-to-post hurricane')
# ggsave("dpSocial.hist.png")
# mean(data$dpSocial)
#
# ggplot(data,aes(x=dpAcc, y=dpSocial))+
#   geom_point()+ xlab('Change in p(proximity)')+ ylab('Change in p(grooming)')+
#   geom_smooth(method='lm',formula= y~x)+ theme_classic(base_size = 15)
#Format the data
data<-within(data,{
sex<-factor(sex,labels=c("M","F"))
ordrank<-factor(ordrank, labels=c("L","M","H"))
group<-factor(group,labels=c("V","KK"))  ##Informs the model of the levels within the catagorical covariates (helps identify where the differences are)
Age_entry.days<-as.numeric(Age_entry.days)
Age_event.days<-as.numeric(Age_event.days)
days.in.study<-as.numeric(days.in.study)
num_obs<-scale(as.numeric(num_obs))
dpAcc<- 100*dpAcc
dpSocial<- 100*dpSocial
year.prehurr<-as.factor(year.prehurr)
id<-as.factor(id)
})
length(which(data$Survival==1))/nrow(data)
data$sexF.dpSocial <- as.numeric(data$sex) * data$dpSocial
data$sexF.dpAcc <- as.numeric(data$sex) * data$dpAcc
table(data$id, data$year.prehurr)
#Fit the survival models
fitsocial.groom<-coxme(Surv(Age_entry.days, Age_event.days, Survival)~dpSocial+sex+strata(ordrank)+ num_obs+ (1|year.prehurr)+(1|id) ,data=data) #Runs a cox PH model with age as the time scale.
#summary(fitsocial.groom)
#cz <- cox.zph(fitsocial.groom)
#print(cz)
fitsocial.prox<-coxme(Surv(Age_entry.days, Age_event.days, Survival)~dpAcc+ sex + strata(ordrank) + num_obs +(1|year.prehurr)+(1|id),data=data) #Runs a cox PH model with age as the time scale.
#summary(fitsocial.prox)
#cz <- cox.zph(fitsocial.prox)
#print(cz)
# data$death.status="Alive"; data$death.status[data$Survival==1]="Dead"
# ggplot(data, aes(x=death.status, y=dpAcc))+
#   geom_violin()+
#   geom_boxplot(width=0.5)+ theme_classic(base_size = 16)+
#   ylab('Change in proximity pre-to-post hurricane')+ xlab('')
# mean(data$dpAcc[data$Survival==0]); mean(data$dpAcc[data$Survival==1])
# sum(data$Survival[data$sex=='F']);sum(data$Survival[data$sex=='M'])
# #IMPORTANT NOTE: rank doesn't follow the proportional assumption.
# #Running models without rank to check if results change
# fitsocial.groom.norank<-coxph(Surv(Age_entry.days, Age_event.days, Survival)~dpSocial*sex +year.prehurr+num_obs,data=data) #Runs a cox PH model with age as the time scale.
# summary(fitsocial.groom.norank)
# cz <- cox.zph(fitsocial.groom.norank)
# print(cz)
#
# fitsocial.prox.norank<-coxph(Surv(Age_entry.days, Age_event.days, Survival)~dpAcc*sex +year.prehurr+num_obs,data=data) #Runs a cox PH model with age as the time scale.
# summary(fitsocial.prox.norank)
# cz <- cox.zph(fitsocial.prox.norank)
# print(cz)
# #Results don't change.
# ### Hazard ratio plots ###
# setwd('~/Documents/GitHub/Cayo-Maria-Survival/Results')
# png("HazardRatio_dprox.png", width=6.25,height=7.25,units="in",res=1200)
# ggforest(fitsocial.prox, data = data)
# dev.off()
#
# png("HazardRatio_dgroom.png", width=5.25,height=7.25,units="in",res=1200)
# ggforest(fitsocial.groom, data = data)
# dev.off()
#
fit.groom.hr = rbind(fit.groom.hr, fixef(fitsocial.groom))
fit.prox.hr = rbind(fit.prox.hr, fixef(fitsocial.prox))
#confint(fitsocial.prox); confint(fitsocial.groom)
print(i)
}
hist(exp(fit.prox.hr$dpAcc), 50, xlab = "Hazard ratio for change in proximity", main = "Histogram of Hazard Ratios for change in proximity")
